{"version":3,"file":"mapbox-wind.cjs.js","sources":["../src/Overlay.ts","../src/ScalarFill.ts","../src/Particles.ts","../src/index.ts"],"sourcesContent":["/**\n * @desc mapbox dom 图层\n * @tip: 为什么实现这个图层，本身mapbox-gl支持 canvas source，但是经过测试添加此图层性能会急剧下降\n */\nimport * as mapboxgl from 'mapbox-gl';\n\n/**\n * 移除 dom\n * @param node\n * @returns {removeDomNode}\n */\nfunction removeDomNode(node: HTMLElement | HTMLCanvasElement) {\n  if (!node) {\n    return null;\n  }\n  if (node.parentNode) {\n    node.parentNode.removeChild(node);\n  }\n  return node;\n}\n\nexport default class Overlay {\n  map: mapboxgl.Map;\n  public options: any;\n  protected canvas: HTMLCanvasElement | null;\n  private canvas2: HTMLCanvasElement | null;\n  private devicePixelRatio: number;\n  public type: string;\n  public renderingMode: string;\n  public id: string | number;\n\n  constructor(id: string | number, options = {}) {\n    if (!id) {\n      throw Error('layer id must be specified');\n    }\n\n    this.id = id;\n    this.options = options;\n    this.canvas = null;\n    this.canvas2 = null;\n\n    this.devicePixelRatio = this.options.devicePixelRatio ||\n      // @ts-ignore\n      (window.devicePixelRatio || (window.screen.deviceXDPI / window.screen.logicalXDPI)) as number;\n\n    this.render = this.render.bind(this);\n\n    this.type = 'custom';\n    this.renderingMode = '2d';\n  }\n\n  onAdd(map: mapboxgl.Map) {\n    this.setMap(map);\n    this.canvas = this.initialize();\n    if (this.options.doubleBuffer) {\n      this.canvas2 = this.initialize();\n    }\n  }\n\n  resizeCanvas(canvas: HTMLCanvasElement) {\n    const mapboxCanvas = this.map.getCanvas();\n\n    // @ts-ignore\n    const { width, height } = this.map.transform;\n\n    const pixel = this.devicePixelRatio;\n\n    canvas.width = width * pixel;\n    canvas.height = height * pixel;\n    canvas.style.width = mapboxCanvas.style.width;\n    canvas.style.height = mapboxCanvas.style.height;\n  }\n\n  initialize() {\n    const canvasContainer = this.map.getCanvasContainer();\n    const mapboxCanvas = this.map.getCanvas();\n    const canvasOverlay = document.createElement('canvas');\n\n    // @ts-ignore\n    const { width, height } = this.map.transform;\n\n    const pixel = this.devicePixelRatio;\n\n    canvasOverlay.width = width * pixel;\n    canvasOverlay.height = height * pixel;\n\n    canvasOverlay.style.position = 'absolute';\n    canvasOverlay.className = 'mapbox-overlay-canvas';\n    canvasOverlay.style.width = mapboxCanvas.style.width;\n    canvasOverlay.style.height = mapboxCanvas.style.height;\n    canvasContainer.appendChild(canvasOverlay);\n\n    return canvasOverlay;\n  }\n\n  render() {}\n\n  project(coordinates: [number, number]) {\n    if (this.map !== undefined) {\n      const lnglat = this.map.project(new mapboxgl.LngLat(coordinates[0], coordinates[1]));\n      const x = lnglat.x;\n      const y = lnglat.y;\n      return [\n        x * this.devicePixelRatio,\n        y * this.devicePixelRatio,\n      ];\n    }\n    return coordinates;\n  }\n\n  unproject(pixel: [number, number]) {\n    if (this.map !== undefined) {\n      const lnglat: mapboxgl.LngLat = this.map.unproject(new mapboxgl.Point(pixel[0], pixel[1]));\n      return [lnglat.lng, lnglat.lat];\n    }\n    return pixel;\n  }\n\n  intersectsCoordinate(coordinate: [number, number]): boolean {\n    const bounds = this.map.getBounds();\n    // @ts-ignore\n    const latRange: [number, number] = this.map?.transform?.latRange;\n    if (latRange) {\n      if (coordinate[1] > latRange[1] || coordinate[1] < latRange[0]) return false;\n    }\n    return bounds.contains(new mapboxgl.LngLat(coordinate[0], coordinate[1])) as boolean;\n    // return true;\n  }\n\n  clear() {\n    if (this.canvas) {\n      const ctx = this.canvas.getContext('2d');\n      ctx && ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    if (this.canvas2) {\n      const ctx = this.canvas2.getContext('2d');\n      ctx && ctx.clearRect(0, 0, this.canvas2.width, this.canvas2.height);\n    }\n  }\n\n  setMap(map: mapboxgl.Map) {\n    this.map = map;\n    return this;\n  }\n\n  getMap() {\n    return this.map;\n  }\n\n  addTo(map: mapboxgl.Map) {\n    this.onAdd(map);\n  }\n\n  remove() {\n    if (this.canvas) {\n      removeDomNode(this.canvas);\n      this.canvas = null;\n    }\n\n    if (this.canvas2) {\n      removeDomNode(this.canvas2);\n      this.canvas2 = null;\n    }\n  }\n}\n","import * as mapboxgl from 'mapbox-gl';\n\nimport {\n  fp64LowPart,\n  getEye,\n  IOptions,\n  ScalarFill as ScalarCore,\n  // @ts-ignore\n} from 'wind-gl-core';\n\nexport interface IScalarFillOptions extends IOptions {\n  wrapX: boolean;\n}\n\nfunction getCoords([lng, lat]: [number, number]): [number, number] {\n  const mercatorCoordinate = mapboxgl.MercatorCoordinate.fromLngLat({\n    lng,\n    lat,\n  });\n  return [mercatorCoordinate.x, mercatorCoordinate.y];\n}\n\nexport default class ScalarFill {\n  public gl: WebGLRenderingContext;\n  public map: mapboxgl.Map;\n  public id: string;\n  public type: string;\n  public renderingMode: '2d' | '3d';\n  private options: any;\n  private data: any;\n  private scalarFill: ScalarCore | null;\n\n  constructor(id: string, data: any, options?: Partial<IScalarFillOptions>) {\n    this.id = id;\n    this.type = 'custom';\n    this.renderingMode = '3d';\n    this.options = {\n      ...(options || {}),\n    };\n\n    this.data = data;\n\n    this.handleZoom = this.handleZoom.bind(this);\n  }\n\n  public handleZoom() {\n    if (this.scalarFill) {\n      this.scalarFill.handleZoom();\n    }\n  }\n\n  public initialize() {\n    if (!this.scalarFill && this.gl) {\n      this.scalarFill = new ScalarCore(this.gl, {\n        opacity: this.options.opacity,\n        renderForm: this.options.renderForm,\n        styleSpec: this.options.styleSpec,\n        displayRange: this.options.displayRange,\n        mappingRange: this.options.mappingRange,\n        widthSegments: this.options.widthSegments,\n        heightSegments: this.options.heightSegments,\n        wireframe: this.options.wireframe,\n        createPlaneBuffer: this.options.createPlaneBuffer,\n        getZoom: () => this.map.getZoom(),\n        triggerRepaint: () => {\n          this.map.triggerRepaint();\n        },\n        injectShaderModules: {\n          '#modules-transformZ': `\nconst float MATH_PI = 3.141592653589793;\nconst float earthRadius = 6371008.8;\nconst float earthCircumfrence = 2.0 * MATH_PI * earthRadius;\n\n            float latFromMercatorY(float y) {\n  float y2 = 180.0 - y * 360.0;\n  return 360.0 / MATH_PI * atan(exp(y2 * MATH_PI / 180.0)) - 90.0;\n}\n\nfloat circumferenceAtLatitude(float latitude) {\n  return earthCircumfrence * cos(latitude * MATH_PI / 180.0);\n}\n\nfloat mercatorScale(float lat) {\n  return 1.0 / cos(lat * MATH_PI / 180.0);\n}\n\nfloat transformZ(float value, vec3 pos) {\n  float mercatorY = pos.y;\n  //  float scale = circumferenceAtLatitude(latFromMercatorY(mercatorY));\n  float scale = earthCircumfrence * mercatorScale(latFromMercatorY(mercatorY));\n\n  return value / scale;\n}\n          `,\n          '#modules-project': `\ngl_Position = u_matrix * vec4(pos.xy + vec2(u_offset, 0.0), pos.z + z, pos.w);\ngl_Position.w += u_cameraEye.w;\n    `,\n        },\n      });\n\n      this.scalarFill.getMercatorCoordinate = getCoords;\n\n      this.map.on('zoom', this.handleZoom);\n    }\n    if (this.data) {\n      this.setData(this.data);\n    }\n  }\n\n  public updateOptions(options: Partial<IScalarFillOptions>) {\n    this.options = {\n      ...this.options,\n      ...(options || {}),\n    };\n    if (this.scalarFill) {\n      this.scalarFill.updateOptions(options);\n    }\n  }\n\n  public onAdd(map: mapboxgl.Map, gl: WebGLRenderingContext) {\n    this.gl = gl;\n    this.map = map;\n\n    if (this.map) {\n      this.initialize();\n    }\n  }\n\n  public setData(data: any) {\n    return new Promise((resolve, reject) => {\n      this.data = data;\n      if (this.data && this.scalarFill) {\n        this.scalarFill.setData(this.data, (status) => {\n          if (status) {\n            resolve(true);\n          } else {\n            reject(false);\n          }\n        });\n      } else {\n        resolve(false);\n      }\n    });\n  }\n\n  // This is called when the map is destroyed or the gl context lost.\n  public onRemove(map: mapboxgl.Map) {\n    if (this.scalarFill) {\n      this.scalarFill.destroyed();\n      this.scalarFill = null;\n    }\n    // @ts-ignore\n    delete this.gl;\n    // @ts-ignore\n    delete this.map;\n    map.off('zoom', this.handleZoom);\n  }\n\n  public getWrappedWorlds() {\n    const result = [0];\n\n    if (this.options.wrapX) {\n      // @ts-ignore\n      const { width, height } = this.map.transform;\n      // @ts-ignore\n      const utl = this.map.transform.pointCoordinate(new mapboxgl.Point(0, 0));\n      // @ts-ignore\n      const utr = this.map.transform.pointCoordinate(\n        new mapboxgl.Point(width, 0),\n      );\n      // @ts-ignore\n      const ubl = this.map.transform.pointCoordinate(\n        new mapboxgl.Point(width, height),\n      );\n      // @ts-ignore\n      const ubr = this.map.transform.pointCoordinate(\n        new mapboxgl.Point(0, height),\n      );\n      const w0 = Math.floor(Math.min(utl.x, utr.x, ubl.x, ubr.x));\n      const w1 = Math.floor(Math.max(utl.x, utr.x, ubl.x, ubr.x));\n\n      const extraWorldCopy = 1;\n\n      for (let w = w0 - extraWorldCopy; w <= w1 + extraWorldCopy; w++) {\n        if (w === 0) {\n          continue;\n        }\n        result.push(w);\n      }\n    }\n    return result;\n  }\n\n  public render(gl: WebGLRenderingContext, matrix: number[]) {\n    const cameraEye = getEye(matrix);\n    const cameraEye64Low = cameraEye.map((item: number) => fp64LowPart(item));\n    if (this.data && this.scalarFill) {\n      const worlds = this.getWrappedWorlds();\n      // tslint:disable-next-line:prefer-for-of\n      for (let i = 0; i < worlds.length; i++) {\n        this.scalarFill.render(matrix, worlds[i], {\n          cameraEye,\n          cameraEye64Low,\n        });\n      }\n    }\n  }\n}\n","import * as mapboxgl from 'mapbox-gl';\n// @ts-ignore\nimport { IWindOptions, WindParticles } from 'wind-gl-core';\n\nexport interface IParticlesOptions extends IWindOptions {\n  wrapX: boolean;\n}\n\nfunction getCoords([lng, lat]: [number, number]): [number, number] {\n  const mercatorCoordinate = mapboxgl.MercatorCoordinate.fromLngLat({\n    lng,\n    lat,\n  });\n  return [mercatorCoordinate.x, mercatorCoordinate.y];\n}\n\nexport default class Particles {\n  private gl: WebGLRenderingContext;\n  public map: any;\n  public id: string;\n  public type: string;\n  public renderingMode: '2d' | '3d';\n  private options: any;\n  private data: any;\n  private layer: any;\n\n  constructor(id: string, data: any, options?: Partial<IParticlesOptions>) {\n    this.id = id;\n    this.type = 'custom';\n    this.renderingMode = '2d';\n    this.options = {\n      ...(options || {}),\n    };\n\n    this.data = data;\n\n    this.resize = this.resize.bind(this);\n    this.handleZoom = this.handleZoom.bind(this);\n    this.handleMovestart = this.handleMovestart.bind(this);\n    this.handleMoveend = this.handleMoveend.bind(this);\n  }\n\n  public updateOptions(options: Partial<IWindOptions>) {\n    this.options = {\n      ...this.options,\n      ...(options || {}),\n    };\n    if (this.layer) {\n      this.layer.updateOptions(options);\n    }\n  }\n\n  public handleZoom() {\n    if (this.layer) {\n      this.layer.handleZoom();\n    }\n  }\n\n  public resize() {\n    if (this.layer) {\n      this.layer.resize();\n    }\n  }\n\n  public handleMovestart() {\n    if (this.layer) {\n      this.layer.handleMovestart();\n    }\n  }\n\n  public handleMoveend() {\n    if (this.layer) {\n      this.layer.handleMoveend();\n    }\n  }\n\n  public initialize() {\n    if (!this.layer && this.gl) {\n      this.layer = new WindParticles(this.gl, {\n        getZoom: () => this.map.getZoom() as number,\n        triggerRepaint: () => {\n          this.map.triggerRepaint();\n        },\n        getExtent: () => {\n          const bounds = this.map.getBounds().toArray();\n          let xmin = bounds[0][0];\n          const ymin = bounds[0][1];\n          let xmax = bounds[1][0];\n          const ymax = bounds[1][1];\n\n          // 如果是多世界了，固定 x 范围到-180 到 180,但是此时采样会出问题\n          // 比如 -190 - -170范围 -1 世界和 0 世界按全球范围采样会出现错误\n          const worlds = this.getWrappedWorlds();\n          if (worlds.length > 1) {\n            xmin = -180;\n            xmax = 180;\n          } else {\n            if (xmin < -180) {\n              xmin = -180;\n            }\n\n            if (xmax > 180) {\n              xmax = 180;\n            }\n          }\n\n          const p0 = mapboxgl.MercatorCoordinate.fromLngLat(\n            new mapboxgl.LngLat(xmin, ymax),\n          );\n          const p1 = mapboxgl.MercatorCoordinate.fromLngLat(\n            new mapboxgl.LngLat(xmax, ymin),\n          );\n          return [p0.x, p0.y, p1.x, p1.y];\n        },\n        getSize: () => {\n          return [\n            this.map.transform.size.x as number,\n            this.map.transform.size.y as number,\n          ];\n        },\n        interacting: () => {\n          return (\n            !this.map.painter.options.moving &&\n            !this.map.painter.options.rotating &&\n            !this.map.painter.options.zooming\n          );\n        },\n        getWorlds: () => this.getWrappedWorlds(),\n        ...this.options,\n      });\n\n      this.layer.getMercatorCoordinate = getCoords;\n\n      this.map.on('zoom', this.handleZoom);\n      this.map.on('movestart', this.handleMovestart);\n      this.map.on('resize', this.resize);\n      this.map.on('moveend', this.handleMoveend);\n    }\n    if (this.data) {\n      this.setData(this.data);\n    }\n  }\n\n  public onAdd(map: mapboxgl.Map, gl: WebGLRenderingContext) {\n    this.gl = gl;\n    this.map = map;\n\n    if (this.map) {\n      this.initialize();\n    }\n  }\n\n  public setData(data: any) {\n    return new Promise((resolve, reject) => {\n      this.data = data;\n      if (this.data && this.layer) {\n        this.layer.setData(this.data, (status: any) => {\n          if (status) {\n            resolve(true);\n          } else {\n            reject(false);\n          }\n        });\n      } else {\n        resolve(false);\n      }\n    });\n  }\n\n  // This is called when the map is destroyed or the gl context lost.\n  public onRemove(map: mapboxgl.Map) {\n    if (this.layer) {\n      this.layer.destroyed();\n      this.layer = null;\n    }\n    map.off('zoom', this.handleZoom);\n    map.off('movestart', this.handleMovestart);\n    map.off('resize', this.resize);\n    map.off('moveend', this.handleMoveend);\n    // @ts-ignore\n    delete this.gl;\n    delete this.map;\n  }\n\n  public getWrappedWorlds() {\n    const result = [0];\n\n    if (this.options.wrapX) {\n      const { width, height } = this.map.transform;\n      const utl = this.map.transform.pointCoordinate(new mapboxgl.Point(0, 0));\n      const utr = this.map.transform.pointCoordinate(\n        new mapboxgl.Point(width, 0),\n      );\n      const ubl = this.map.transform.pointCoordinate(\n        new mapboxgl.Point(width, height),\n      );\n      const ubr = this.map.transform.pointCoordinate(\n        new mapboxgl.Point(0, height),\n      );\n      const w0 = Math.floor(Math.min(utl.x, utr.x, ubl.x, ubr.x));\n      const w1 = Math.floor(Math.max(utl.x, utr.x, ubl.x, ubr.x));\n\n      const extraWorldCopy = 0;\n\n      for (let w = w0 - extraWorldCopy; w <= w1 + extraWorldCopy; w++) {\n        if (w === 0) {\n          continue;\n        }\n        result.push(w);\n      }\n    }\n    return result;\n  }\n\n  public prerender(gl: WebGLRenderingContext, matrix: number[]) {\n    if (this.data && this.layer) {\n      this.layer.prerender(matrix);\n    }\n  }\n\n  public render(gl: WebGLRenderingContext, matrix: number[]) {\n    if (this.data && this.layer) {\n      this.layer.render(matrix);\n    }\n  }\n}\n","import * as mapboxgl from 'mapbox-gl';\n\nimport {\n  WindCore,\n  assign,\n  defaultOptions,\n  Field,\n  formatData,\n  isArray,\n} from 'wind-core';\nimport type { IField, IOptions } from 'wind-core';\n\nimport Overlay from './Overlay';\n\nexport { Field, WindLayer };\n\nexport { default as ScalarFill } from './ScalarFill';\nexport { default as Particles } from './Particles';\n\nexport interface IWindOptions extends IOptions {\n  windOptions: Partial<IOptions>;\n  fieldOptions: any;\n  [key: string]: any;\n}\n\nconst defaultConfig = {\n  doubleBuffer: false,\n  windOptions: defaultOptions,\n};\n\nclass WindLayer extends Overlay {\n  // @ts-ignore\n  public options: IWindOptions;\n  private field: Field | undefined;\n  private wind: WindCore;\n\n  constructor(id: string | number, data: any, options = {} as any) {\n    super(id, { ...defaultConfig, ...options });\n    this.pickWindOptions();\n\n    if (data) {\n      this.setData(data, options.fieldOptions);\n    }\n\n    this.stop = this.stop.bind(this);\n    this.render = this.render.bind(this);\n    this.handleResize = this.handleResize.bind(this);\n  }\n\n  public onAdd(map: mapboxgl.Map) {\n    super.onAdd(map);\n\n    if (!this.map) {\n      throw new Error('map is null');\n      return;\n    }\n\n    if (this.canvas !== null) {\n      // this._retina = window.devicePixelRatio >= 2;\n\n      this.render();\n      this.registerEvents();\n    }\n  }\n\n  public handleResize() {\n    if (this.canvas) {\n      this.resizeCanvas(this.canvas);\n    }\n    this.render();\n  }\n\n  public registerEvents() {\n    this.map.on('resize', this.handleResize);\n    this.map.on('movestart', this.stop);\n    this.map.on('moveend', this.render);\n    this.map.on('zoomstart', this.stop);\n    this.map.on('zoomend', this.render);\n    this.map.on('rotatestart', this.stop);\n    this.map.on('rotateend', this.render);\n    this.map.on('pitchstart', this.stop);\n    this.map.on('pitchend', this.render);\n  }\n\n  public unregisterEvents() {\n    this.map.off('resize', this.handleResize);\n    this.map.off('movestart', this.stop);\n    this.map.off('moveend', this.render);\n    this.map.off('zoomstart', this.stop);\n    this.map.off('zoomend', this.render);\n    this.map.off('rotatestart', this.stop);\n    this.map.off('rotateend', this.render);\n    this.map.off('pitchstart', this.stop);\n    this.map.off('pitchend', this.render);\n  }\n\n  public stop() {\n    if (this.wind) {\n      this.wind.clearCanvas();\n    }\n  }\n\n  public render() {\n    if (!this.map) {\n      return;\n    }\n\n    const opt = this.getWindOptions();\n    if (!this.wind && this.map && this.canvas !== null) {\n      const ctx = this.canvas.getContext('2d');\n      if (!ctx) {\n        console.error('create canvas context failed');\n        return;\n      }\n      const data = this.getData();\n\n      // @ts-ignore\n      this.wind = new WindCore(ctx, opt, data);\n\n      // @ts-ignore\n      this.wind.project = this.project.bind(this);\n      // @ts-ignore\n      this.wind.unproject = this.unproject.bind(this);\n      this.wind.intersectsCoordinate = this.intersectsCoordinate.bind(this);\n      this.wind.postrender = () => {\n        // @ts-ignore\n        // this.setCanvasUpdated();\n      };\n    }\n\n    this.wind.prerender();\n    this.wind.render();\n  }\n\n  public remove() {\n    super.remove();\n\n    if (this.wind) {\n      this.wind.stop();\n    }\n\n    this.unregisterEvents();\n  }\n\n  public pickWindOptions() {\n    Object.keys(defaultOptions).forEach((key: string) => {\n      if (this.options && key in this.options) {\n        if (this.options.windOptions === undefined) {\n          this.options.windOptions = {};\n        }\n        // @ts-ignore\n        this.options.windOptions[key] = this.options[key];\n      }\n    });\n  }\n\n  /**\n   * get wind layer data\n   */\n  public getData() {\n    return this.field;\n  }\n\n  /**\n   * set layer data\n   * @param data\n   * @param options\n   * @returns {WindLayer}\n   */\n  public setData(data: any, options: Partial<IField> = {}) {\n    if (data && data.checkFields && data.checkFields()) {\n      this.field = data;\n    } else if (isArray(data)) {\n      this.field = formatData(data, options);\n    } else {\n      console.error('Illegal data');\n    }\n\n    if (this.field) {\n      this?.wind?.updateData(this.field as Field);\n    }\n\n    return this;\n  }\n\n  public setWindOptions(options: Partial<IOptions>) {\n    const beforeOptions = this.options.windOptions || {};\n    this.options = assign(this.options, {\n      windOptions: assign(beforeOptions, options || {}),\n    });\n\n    if (this.wind) {\n      const windOptions = this.options.windOptions;\n      this.wind.setOptions(windOptions);\n      this.wind.prerender();\n    }\n  }\n\n  public getWindOptions() {\n    return this.options.windOptions || {};\n  }\n}\n\nexport default WindLayer;\n"],"names":["mapboxgl","getCoords","ScalarCore","getEye","fp64LowPart","WindParticles","defaultOptions","WindCore","isArray","formatData","assign"],"mappings":"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"}