function noop() { }
const identity = x => x;
function assign(tar, src) {
    // @ts-ignore
    for (const k in src)
        tar[k] = src[k];
    return tar;
}
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function create_slot(definition, ctx, $$scope, fn) {
    if (definition) {
        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
        return definition[0](slot_ctx);
    }
}
function get_slot_context(definition, ctx, $$scope, fn) {
    return definition[1] && fn
        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
        : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
    if (definition[2] && fn) {
        const lets = definition[2](fn(dirty));
        if ($$scope.dirty === undefined) {
            return lets;
        }
        if (typeof lets === 'object') {
            const merged = [];
            const len = Math.max($$scope.dirty.length, lets.length);
            for (let i = 0; i < len; i += 1) {
                merged[i] = $$scope.dirty[i] | lets[i];
            }
            return merged;
        }
        return $$scope.dirty | lets;
    }
    return $$scope.dirty;
}
function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
    if (slot_changes) {
        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
        slot.p(slot_context, slot_changes);
    }
}

const is_client = typeof window !== 'undefined';
let now = is_client
    ? () => window.performance.now()
    : () => Date.now();
let raf = is_client ? cb => requestAnimationFrame(cb) : noop;

const tasks = new Set();
function run_tasks(now) {
    tasks.forEach(task => {
        if (!task.c(now)) {
            tasks.delete(task);
            task.f();
        }
    });
    if (tasks.size !== 0)
        raf(run_tasks);
}
/**
 * Creates a new task that runs on each raf frame
 * until it returns a falsy value or is aborted
 */
function loop(callback) {
    let task;
    if (tasks.size === 0)
        raf(run_tasks);
    return {
        promise: new Promise(fulfill => {
            tasks.add(task = { c: callback, f: fulfill });
        }),
        abort() {
            tasks.delete(task);
        }
    };
}

function append(target, node) {
    target.appendChild(node);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function element(name) {
    return document.createElement(name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function empty() {
    return text('');
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function children(element) {
    return Array.from(element.childNodes);
}
function set_style(node, key, value, important) {
    node.style.setProperty(key, value, important ? 'important' : '');
}
function custom_event(type, detail) {
    const e = document.createEvent('CustomEvent');
    e.initCustomEvent(type, false, false, detail);
    return e;
}

const active_docs = new Set();
let active = 0;
// https://github.com/darkskyapp/string-hash/blob/master/index.js
function hash(str) {
    let hash = 5381;
    let i = str.length;
    while (i--)
        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
    return hash >>> 0;
}
function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
    const step = 16.666 / duration;
    let keyframes = '{\n';
    for (let p = 0; p <= 1; p += step) {
        const t = a + (b - a) * ease(p);
        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
    }
    const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
    const name = `__svelte_${hash(rule)}_${uid}`;
    const doc = node.ownerDocument;
    active_docs.add(doc);
    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);
    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});
    if (!current_rules[name]) {
        current_rules[name] = true;
        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
    }
    const animation = node.style.animation || '';
    node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;
    active += 1;
    return name;
}
function delete_rule(node, name) {
    const previous = (node.style.animation || '').split(', ');
    const next = previous.filter(name
        ? anim => anim.indexOf(name) < 0 // remove specific animation
        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
    );
    const deleted = previous.length - next.length;
    if (deleted) {
        node.style.animation = next.join(', ');
        active -= deleted;
        if (!active)
            clear_rules();
    }
}
function clear_rules() {
    raf(() => {
        if (active)
            return;
        active_docs.forEach(doc => {
            const stylesheet = doc.__svelte_stylesheet;
            let i = stylesheet.cssRules.length;
            while (i--)
                stylesheet.deleteRule(i);
            doc.__svelte_rules = {};
        });
        active_docs.clear();
    });
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error(`Function called outside component initialization`);
    return current_component;
}
function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
}
function afterUpdate(fn) {
    get_current_component().$$.after_update.push(fn);
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
let flushing = false;
const seen_callbacks = new Set();
function flush() {
    if (flushing)
        return;
    flushing = true;
    do {
        // first, call beforeUpdate functions
        // and update components
        for (let i = 0; i < dirty_components.length; i += 1) {
            const component = dirty_components[i];
            set_current_component(component);
            update(component.$$);
        }
        dirty_components.length = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    flushing = false;
    seen_callbacks.clear();
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}

let promise;
function wait() {
    if (!promise) {
        promise = Promise.resolve();
        promise.then(() => {
            promise = null;
        });
    }
    return promise;
}
function dispatch(node, direction, kind) {
    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
}
const outroing = new Set();
let outros;
function group_outros() {
    outros = {
        r: 0,
        c: [],
        p: outros // parent group
    };
}
function check_outros() {
    if (!outros.r) {
        run_all(outros.c);
    }
    outros = outros.p;
}
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
}
const null_transition = { duration: 0 };
function create_in_transition(node, fn, params) {
    let config = fn(node, params);
    let running = false;
    let animation_name;
    let task;
    let uid = 0;
    function cleanup() {
        if (animation_name)
            delete_rule(node, animation_name);
    }
    function go() {
        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
        if (css)
            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
        tick(0, 1);
        const start_time = now() + delay;
        const end_time = start_time + duration;
        if (task)
            task.abort();
        running = true;
        add_render_callback(() => dispatch(node, true, 'start'));
        task = loop(now => {
            if (running) {
                if (now >= end_time) {
                    tick(1, 0);
                    dispatch(node, true, 'end');
                    cleanup();
                    return running = false;
                }
                if (now >= start_time) {
                    const t = easing((now - start_time) / duration);
                    tick(t, 1 - t);
                }
            }
            return running;
        });
    }
    let started = false;
    return {
        start() {
            if (started)
                return;
            delete_rule(node);
            if (is_function(config)) {
                config = config();
                wait().then(go);
            }
            else {
                go();
            }
        },
        invalidate() {
            started = false;
        },
        end() {
            if (running) {
                cleanup();
                running = false;
            }
        }
    };
}
function create_out_transition(node, fn, params) {
    let config = fn(node, params);
    let running = true;
    let animation_name;
    const group = outros;
    group.r += 1;
    function go() {
        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
        if (css)
            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
        const start_time = now() + delay;
        const end_time = start_time + duration;
        add_render_callback(() => dispatch(node, false, 'start'));
        loop(now => {
            if (running) {
                if (now >= end_time) {
                    tick(0, 1);
                    dispatch(node, false, 'end');
                    if (!--group.r) {
                        // this will result in `end()` being called,
                        // so we don't need to clean up here
                        run_all(group.c);
                    }
                    return false;
                }
                if (now >= start_time) {
                    const t = easing((now - start_time) / duration);
                    tick(1 - t, t);
                }
            }
            return running;
        });
    }
    if (is_function(config)) {
        wait().then(() => {
            // @ts-ignore
            config = config();
            go();
        });
    }
    else {
        go();
    }
    return {
        end(reset) {
            if (reset && config.tick) {
                config.tick(1, 0);
            }
            if (running) {
                if (animation_name)
                    delete_rule(node, animation_name);
                running = false;
            }
        }
    };
}

const globals = (typeof window !== 'undefined'
    ? window
    : typeof globalThis !== 'undefined'
        ? globalThis
        : global);
function mount_component(component, target, anchor) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    // onMount happens before the initial afterUpdate
    add_render_callback(() => {
        const new_on_destroy = on_mount.map(run).filter(is_function);
        if (on_destroy) {
            on_destroy.push(...new_on_destroy);
        }
        else {
            // Edge case - component was destroyed immediately,
            // most likely as a result of a binding initialising
            run_all(new_on_destroy);
        }
        component.$$.on_mount = [];
    });
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const prop_values = options.props || {};
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : []),
        // everything else
        callbacks: blank_object(),
        dirty
    };
    let ready = false;
    $$.ctx = instance
        ? instance(component, prop_values, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if ($$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor);
        flush();
    }
    set_current_component(parent_component);
}
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set() {
        // overridden by instance, if it has props
    }
}

function cubicOut(t) {
    const f = t - 1.0;
    return f * f * f + 1.0;
}

function fade(node, { delay = 0, duration = 400, easing = identity }) {
    const o = +getComputedStyle(node).opacity;
    return {
        delay,
        duration,
        easing,
        css: t => `opacity: ${t * o}`
    };
}
function fly(node, { delay = 0, duration = 400, easing = cubicOut, x = 0, y = 0, opacity = 0 }) {
    const style = getComputedStyle(node);
    const target_opacity = +style.opacity;
    const transform = style.transform === 'none' ? '' : style.transform;
    const od = target_opacity * (1 - opacity);
    return {
        delay,
        duration,
        easing,
        css: (t, u) => `
			transform: ${transform} translate(${(1 - t) * x}px, ${(1 - t) * y}px);
			opacity: ${target_opacity - (od * u)}`
    };
}

/* src\Component.svelte generated by Svelte v3.24.0 */

const { document: document_1 } = globals;

function add_css() {
	var style = element("style");
	style.id = "svelte-denx9o-style";
	style.textContent = ".wrapper.svelte-denx9o.svelte-denx9o{z-index:2;position:fixed;top:0;left:0;background:rgba(255, 255, 255, 0.75);min-height:100vh;max-height:100vh;min-width:100vw;max-width:100vw}.inner.svelte-denx9o.svelte-denx9o{z-index:3;position:fixed;left:50%;transform:translateX(-50%);bottom:-15px;background:#ffffff;box-shadow:0px 0px 25px rgba(0, 0, 0, 0.25);border-radius:19px;max-width:100vw;min-width:100vw;padding:35px;min-height:65vh;max-height:65vh;margin:auto;overflow:scroll;-ms-overflow-style:none}.inner.svelte-denx9o.svelte-denx9o::-webkit-scrollbar{display:none}.line.svelte-denx9o.svelte-denx9o{width:45px;height:7.14px;background:#ececec;border-radius:10px;margin:auto;width:100px}.crossimg.svelte-denx9o.svelte-denx9o{width:25px}.content.svelte-denx9o.svelte-denx9o{padding-top:35px;margin:auto}.innercontent.svelte-denx9o.svelte-denx9o{position:relative;min-height:100%}.linewrapper.svelte-denx9o.svelte-denx9o{position:fixed;z-index:4;left:0;height:70px;display:flex;justify-content:center;align-items:center;transform:translateX(-50%);background:white;border-radius:19px;cursor:move}.actionsDiv.svelte-denx9o.svelte-denx9o{display:flex;justify-content:space-between;align-items:center;padding:0px 35px}@media only screen and (max-width: 570px){.wrapper.svelte-denx9o .inner.svelte-denx9o{min-width:100vw !important}}@media only screen and (max-width: 800px){.inner.svelte-denx9o.svelte-denx9o{min-width:70vw !important}}@media only screen and (max-width: 1000px){.inner.svelte-denx9o.svelte-denx9o{min-width:70vw !important}}@media only screen and (max-width: 1600px){.inner.svelte-denx9o.svelte-denx9o{min-width:50vw}}@media only screen and (min-width: 1600px){.inner.svelte-denx9o.svelte-denx9o{min-width:40vw}}";
	append(document_1.head, style);
}

const get_right_slot_changes = dirty => ({});
const get_right_slot_context = ctx => ({});
const get_left_slot_changes = dirty => ({});
const get_left_slot_context = ctx => ({});

// (318:0) {#if visible}
function create_if_block(ctx) {
	let div6;
	let div2;
	let div1;
	let div0;
	let div2_intro;
	let div2_outro;
	let t0;
	let div5;
	let div4;
	let t1;
	let div3;
	let t2;
	let div5_intro;
	let div5_outro;
	let div6_intro;
	let div6_outro;
	let current;
	const default_slot_template = /*$$slots*/ ctx[11].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

	function select_block_type(ctx, dirty) {
		if (/*undraggeble*/ ctx[3]) return create_if_block_1;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);
	const left_slot_template = /*$$slots*/ ctx[11].left;
	const left_slot = create_slot(left_slot_template, ctx, /*$$scope*/ ctx[10], get_left_slot_context);
	const right_slot_template = /*$$slots*/ ctx[11].right;
	const right_slot = create_slot(right_slot_template, ctx, /*$$scope*/ ctx[10], get_right_slot_context);

	return {
		c() {
			div6 = element("div");
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			if (default_slot) default_slot.c();
			t0 = space();
			div5 = element("div");
			div4 = element("div");
			if_block.c();
			t1 = space();
			div3 = element("div");
			if (left_slot) left_slot.c();
			t2 = space();
			if (right_slot) right_slot.c();
			attr(div0, "class", "content svelte-denx9o");
			attr(div1, "class", "innercontent svelte-denx9o");
			set_style(div2, "overflow-y", /*overflow*/ ctx[9]);
			set_style(div2, "min-height", /*minVH*/ ctx[2] + "vh");
			set_style(div2, "max-height", /*maxVH*/ ctx[1] + "vh");
			attr(div2, "class", "inner svelte-denx9o");
			attr(div3, "class", "actionsDiv svelte-denx9o");
			attr(div5, "class", "linewrapper svelte-denx9o");
			attr(div5, "draggable", "true");
			attr(div6, "class", "wrapper svelte-denx9o");
		},
		m(target, anchor) {
			insert(target, div6, anchor);
			append(div6, div2);
			append(div2, div1);
			append(div1, div0);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			/*div2_binding*/ ctx[12](div2);
			append(div6, t0);
			append(div6, div5);
			append(div5, div4);
			if_block.m(div4, null);
			append(div4, t1);
			append(div4, div3);

			if (left_slot) {
				left_slot.m(div3, null);
			}

			append(div3, t2);

			if (right_slot) {
				right_slot.m(div3, null);
			}

			/*div3_binding*/ ctx[15](div3);
			/*div5_binding*/ ctx[16](div5);
			/*div6_binding*/ ctx[17](div6);
			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty[0] & /*$$scope*/ 1024) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[10], dirty, null, null);
				}
			}

			if (!current || dirty[0] & /*overflow*/ 512) {
				set_style(div2, "overflow-y", /*overflow*/ ctx[9]);
			}

			if (!current || dirty[0] & /*minVH*/ 4) {
				set_style(div2, "min-height", /*minVH*/ ctx[2] + "vh");
			}

			if (!current || dirty[0] & /*maxVH*/ 2) {
				set_style(div2, "max-height", /*maxVH*/ ctx[1] + "vh");
			}

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div4, t1);
				}
			}

			if (left_slot) {
				if (left_slot.p && dirty[0] & /*$$scope*/ 1024) {
					update_slot(left_slot, left_slot_template, ctx, /*$$scope*/ ctx[10], dirty, get_left_slot_changes, get_left_slot_context);
				}
			}

			if (right_slot) {
				if (right_slot.p && dirty[0] & /*$$scope*/ 1024) {
					update_slot(right_slot, right_slot_template, ctx, /*$$scope*/ ctx[10], dirty, get_right_slot_changes, get_right_slot_context);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);

			add_render_callback(() => {
				if (div2_outro) div2_outro.end(1);
				if (!div2_intro) div2_intro = create_in_transition(div2, fly, { y: 2000, duration: 250 });
				div2_intro.start();
			});

			transition_in(left_slot, local);
			transition_in(right_slot, local);

			add_render_callback(() => {
				if (div5_outro) div5_outro.end(1);
				if (!div5_intro) div5_intro = create_in_transition(div5, fly, { y: 2000, duration: 250 });
				div5_intro.start();
			});

			add_render_callback(() => {
				if (div6_outro) div6_outro.end(1);
				if (!div6_intro) div6_intro = create_in_transition(div6, fade, { duration: 250 });
				div6_intro.start();
			});

			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			if (div2_intro) div2_intro.invalidate();
			div2_outro = create_out_transition(div2, fly, { y: 1000, duration: 750 });
			transition_out(left_slot, local);
			transition_out(right_slot, local);
			if (div5_intro) div5_intro.invalidate();
			div5_outro = create_out_transition(div5, fly, { y: 1000, duration: 750 });
			if (div6_intro) div6_intro.invalidate();
			div6_outro = create_out_transition(div6, fade, { duration: 350 });
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div6);
			if (default_slot) default_slot.d(detaching);
			/*div2_binding*/ ctx[12](null);
			if (detaching && div2_outro) div2_outro.end();
			if_block.d();
			if (left_slot) left_slot.d(detaching);
			if (right_slot) right_slot.d(detaching);
			/*div3_binding*/ ctx[15](null);
			/*div5_binding*/ ctx[16](null);
			if (detaching && div5_outro) div5_outro.end();
			/*div6_binding*/ ctx[17](null);
			if (detaching && div6_outro) div6_outro.end();
		}
	};
}

// (351:8) {:else}
function create_else_block(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "class", "line svelte-denx9o");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			/*div_binding*/ ctx[14](div);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(div);
			/*div_binding*/ ctx[14](null);
		}
	};
}

// (344:8) {#if undraggeble}
function create_if_block_1(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			if (img.src !== (img_src_value = "/assets/cross_primary.svg")) attr(img, "src", img_src_value);
			attr(img, "alt", "X");
			attr(img, "class", "crossimg svelte-denx9o");
			set_style(img, "cursor", /*undraggeble*/ ctx[3] ? "pointer" : "move");
		},
		m(target, anchor) {
			insert(target, img, anchor);
			/*img_binding*/ ctx[13](img);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*undraggeble*/ 8) {
				set_style(img, "cursor", /*undraggeble*/ ctx[3] ? "pointer" : "move");
			}
		},
		d(detaching) {
			if (detaching) detach(img);
			/*img_binding*/ ctx[13](null);
		}
	};
}

function create_fragment(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*visible*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*visible*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*visible*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function getOffset(element) {
	let xPosition = 0;
	let yPosition = 0;

	while (element) {
		yPosition += element.offsetTop - element.scrollTop + element.clientTop;
		xPosition += element.offsetLeft - element.scrollLeft + element.clientLeft;
		element = element.offsetParent;
	}

	return { xPosition, yPosition };
}

function instance($$self, $$props, $$invalidate) {
	let { visible = true } = $$props;
	let { maxVH = 90 } = $$props;
	let { minVH = 85 } = $$props;
	let initialized = false;
	let undraggeble = true;
	let inner, lineWrapper, wrapper, line, actionsDiv, overflow;
	let origHeight, origBottom, maxWidth, lastPageY, value, per_viewportHeight = 0;
	let touchStartHandler, touchMoveHandler, touchPoint;

	window.addEventListener("resize", () => {
		if (visible) {
			maxWidth = getComputedStyle(inner).width;
			$$invalidate(5, lineWrapper.style.width = maxWidth, lineWrapper);
		}
	});

	afterUpdate(() => {
		if (visible && !initialized) {
			origHeight = parseInt(getComputedStyle(inner).maxHeight.split("px")[0]);
			maxWidth = getComputedStyle(inner).width;
			$$invalidate(5, lineWrapper.style.width = maxWidth, lineWrapper);
			initialize();
			initialized = true;
			blockDrag();
		} else if (!visible) {
			lastPageY = undefined;
			initialized = false;
		}

		if (visible) {
			// updated the linewrapper position
			let innerOffset = getOffset(inner);

			$$invalidate(5, lineWrapper.style.top = innerOffset.yPosition + "px", lineWrapper);
			$$invalidate(5, lineWrapper.style.left = innerOffset.xPosition + "px", lineWrapper);
			$$invalidate(8, actionsDiv.style.width = lineWrapper.style.width, actionsDiv);
		}
	});

	onMount(() => {
		let vh = getComputedStyle(wrapper).height.split("px")[0] / 100;

		if (getComputedStyle(inner).height.split("px")[0] > vh * 85) {
			$$invalidate(9, overflow = "scroll");
		} else {
			$$invalidate(9, overflow = "inherit");
		}

		initialize();
		$$invalidate(3, undraggeble = document.ontouchmove === undefined && typeof window.orientation !== "undefined");
		origBottom = getComputedStyle(inner).bottom;

		setTimeout(
			() => {
				maxWidth = getComputedStyle(inner).width;
				$$invalidate(5, lineWrapper.style.width = maxWidth, lineWrapper);
			},
			500
		);
	});

	function initialize() {
		per_viewportHeight = parseInt(getComputedStyle(inner).minHeight.split("px")[0]) / minVH;

		if (document.ontouchmove === null) {
			// touch move supported
			// passive event listener: checkout https://www.chromestatus.com/feature/5745543795965952
			var supportsPassive = false;

			try {
				var opts = Object.defineProperty({}, "passive", {
					get() {
						supportsPassive = true;
					}
				});

				window.addEventListener("testPassive", null, opts);
				window.removeEventListener("testPassive", null, opts);
			} catch(e) {
				
			}

			// add event listener
			lineWrapper.addEventListener("touchmove", moveElement, supportsPassive ? { passive: true } : false);

			lineWrapper.addEventListener("touchend", closeElement, supportsPassive ? { passive: true } : false);
			return;
		} else if (undraggeble) {
			// touch move not supported and is mobile version
			line.addEventListener("click", () => {
				closeElement(1);
			});
		}

		// desktop version
		lineWrapper.addEventListener("dragstart", e => {
			e = e || window.event;
			e.preventDefault();
			document.addEventListener("mousemove", moveElement);
			document.addEventListener("mouseup", closeElement);
		});
	}

	function moveElement(e) {
		if (!inner) {
			return;
		}

		let touchLocation = document.ontouchmove === null
		? e.targetTouches[0].pageY
		: e.clientY;

		let minBottomExpo = 1.5;

		if (lastPageY === undefined) {
			lastPageY = touchLocation;
		}

		if (lastPageY <= touchLocation) {
			// user is dragging down the lineWrapper
			let botton = getComputedStyle(inner).bottom;

			value = parseInt(botton.split("px")[0]);
			$$invalidate(4, inner.style.bottom = value - Math.abs(touchLocation - lastPageY) + "px", inner);
			lastPageY = touchLocation;

			if (Math.abs(value * minBottomExpo) > origHeight) {
				closeElement(1);
			}
		} else {
			// user is dragging up the lineWrapper
			innerHeight = parseInt(inner.style.maxHeight.split("px")[0]);

			innerHeight = isNaN(innerHeight) ? 0 : innerHeight;

			if (innerHeight <= maxVH * per_viewportHeight) {
				let maxHeight = getComputedStyle(inner).maxHeight;
				value = parseInt(maxHeight.split("px")[0]);
				$$invalidate(4, inner.style.maxHeight = value + Math.abs(touchLocation - lastPageY) + "px", inner);
				lastPageY = touchLocation;
			}
		}
	}

	function closeElement(e) {
		unblockDrag();
		value = 0;
		lastPageY = undefined;
		document.removeEventListener("mousemove", moveElement);

		if (Math.abs(value * 5) > origHeight || e === 1) {
			$$invalidate(0, visible = false);
		} else if (inner && visible) {
			$$invalidate(4, inner.style.bottom = origBottom, inner);
		}
	}

	function blockDrag() {
		(function () {
			// Only needed for touch events on chrome.
			if ((window.chrome || navigator.userAgent.match("CriOS")) && "ontouchstart" in document.documentElement) {
				touchStartHandler = function () {
					// Only need to handle single-touch cases
					touchPoint = event.touches.length === 1
					? event.touches[0].clientY
					: null;
				};

				touchMoveHandler = function (event) {
					var newTouchPoint;

					// Only need to handle single-touch cases
					if (event.touches.length !== 1) {
						touchPoint = null;
						return;
					}

					// We only need to defaultPrevent when scrolling up
					newTouchPoint = event.touches[0].clientY;

					if (newTouchPoint > touchPoint) {
						event.preventDefault();
					}

					touchPoint = newTouchPoint;
				};

				document.addEventListener("touchstart", touchStartHandler, { passive: false });
				document.addEventListener("touchmove", touchMoveHandler, { passive: false });
			}
		})();
	}

	function unblockDrag() {
		if ((window.chrome || navigator.userAgent.match("CriOS")) && "ontouchstart" in document.documentElement) {
			document.removeEventListener("touchstart", touchStartHandler);
			document.removeEventListener("touchmove", touchMoveHandler);
		}
	}

	let { $$slots = {}, $$scope } = $$props;

	function div2_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			inner = $$value;
			$$invalidate(4, inner);
		});
	}

	function img_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			line = $$value;
			$$invalidate(7, line);
		});
	}

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			line = $$value;
			$$invalidate(7, line);
		});
	}

	function div3_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			actionsDiv = $$value;
			$$invalidate(8, actionsDiv);
		});
	}

	function div5_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			lineWrapper = $$value;
			$$invalidate(5, lineWrapper);
		});
	}

	function div6_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			wrapper = $$value;
			$$invalidate(6, wrapper);
		});
	}

	$$self.$set = $$props => {
		if ("visible" in $$props) $$invalidate(0, visible = $$props.visible);
		if ("maxVH" in $$props) $$invalidate(1, maxVH = $$props.maxVH);
		if ("minVH" in $$props) $$invalidate(2, minVH = $$props.minVH);
		if ("$$scope" in $$props) $$invalidate(10, $$scope = $$props.$$scope);
	};

	return [
		visible,
		maxVH,
		minVH,
		undraggeble,
		inner,
		lineWrapper,
		wrapper,
		line,
		actionsDiv,
		overflow,
		$$scope,
		$$slots,
		div2_binding,
		img_binding,
		div_binding,
		div3_binding,
		div5_binding,
		div6_binding
	];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		if (!document_1.getElementById("svelte-denx9o-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, { visible: 0, maxVH: 1, minVH: 2 }, [-1, -1]);
	}
}

export default Component;
