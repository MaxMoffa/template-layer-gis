import { SvelteComponent, init, safe_not_equal, create_slot, element, space, set_style, insert, update_slot_base, get_all_dirty_from_scope, get_slot_changes, transition_in, transition_out, detach, binding_callbacks } from 'svelte/internal';
import { createEventDispatcher, onMount, onDestroy } from 'svelte';
import screenfull from 'screenfull';

/* src/lib/Fullscreen.svelte generated by Svelte v3.42.4 */
const get_default_slot_changes = dirty => ({});

const get_default_slot_context = ctx => ({
	onToggle: /*onToggle*/ ctx[1],
	onRequest: /*onRequest*/ ctx[2],
	onExit: /*onExit*/ ctx[3]
});

function create_fragment(ctx) {
	let div;
	let t;
	let current;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], get_default_slot_context);

	return {
		c() {
			div = element("div");
			t = space();
			if (default_slot) default_slot.c();
			set_style(div, "width", "0");
			set_style(div, "height", "0");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			/*div_binding*/ ctx[6](div);
			insert(target, t, anchor);

			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[4],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, get_default_slot_changes),
						get_default_slot_context
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			/*div_binding*/ ctx[6](null);
			if (detaching) detach(t);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let component;
	const dispatch = createEventDispatcher();

	onMount(() => {
		if (screenfull.isEnabled) {
			screenfull.on("change", () => dispatch("change"));
			screenfull.on("error", () => dispatch("error"));
		}
	});

	const onToggle = () => {
		if (screenfull.isEnabled && (component === null || component === void 0
		? void 0
		: component.nextElementSibling)) {
			screenfull.toggle(component.nextElementSibling);
		}
	};

	const onRequest = () => {
		if (screenfull.isEnabled && (component === null || component === void 0
		? void 0
		: component.nextElementSibling)) {
			screenfull.request(component.nextElementSibling);
		}
	};

	const onExit = () => {
		if (screenfull.isEnabled && (component === null || component === void 0
		? void 0
		: component.nextElementSibling)) {
			screenfull.exit();
		}
	};

	onDestroy(() => {
		if (screenfull.isEnabled) {
			screenfull.off("change", () => true);
			screenfull.off("error", () => true);
		}
	});

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			component = $$value;
			$$invalidate(0, component);
		});
	}

	$$self.$$set = $$props => {
		if ('$$scope' in $$props) $$invalidate(4, $$scope = $$props.$$scope);
	};

	return [component, onToggle, onRequest, onExit, $$scope, slots, div_binding];
}

class Fullscreen extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export { Fullscreen as default };
